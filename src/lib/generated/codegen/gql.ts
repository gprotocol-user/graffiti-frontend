/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query GET_POSTS_TIMESTAMP_AGGREGATE_HELPER(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { locked_funds: desc_nulls_last }\n      where: {\n        _and: [\n          { wallIndex: { _eq: $wallIndex } },\n          { timestamp: { _gt: $from } }, \n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        address\n        message\n        timestamp\n        locked_funds\n        postIndex\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n": types.Get_Posts_Timestamp_Aggregate_HelperDocument,
    "\n  query GET_POSTS_BUYSER_FUNDS_AGGREGATE(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $address: String = \"0\"\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { locked_funds: desc_nulls_last }\n      where: {\n        _and: [\n          { address: { _eq: $address } },\n          { timestamp: { _gt: $from } }, \n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        address\n        message\n        timestamp\n        locked_funds\n        postIndex\n        graffitiToWalls {\n          wallName\n        }\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n": types.Get_Posts_Buyser_Funds_AggregateDocument,
    "\n  query GET_POSTS_TIMESTAMP_AGGREGATE_BYTIME_TEST(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { timestamp: desc_nulls_last }\n      where: {\n        _and: [\n          { wallIndex: { _eq: $wallIndex } },\n          { timestamp: { _gt: $from } },\n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n      updated_timestamp\n      updated_at\n      locked_funds\n      timestamp\n      address\n      message\n      postIndex\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n": types.Get_Posts_Timestamp_Aggregate_Bytime_TestDocument,
    "\n  query GET_POSTS_BYUSER_TIMESTAMP_AGGREGATE(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $address: String = \"0\"\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { timestamp: desc_nulls_last }\n      where: {\n        _and: [\n          { address: { _eq: $address } },\n          { timestamp: { _gt: $from } },\n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        updated_timestamp\n        updated_at\n        locked_funds\n        timestamp\n        address\n        message\n        postIndex\n        graffitiToWalls {\n          wallName\n        }\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n": types.Get_Posts_Byuser_Timestamp_AggregateDocument,
    "\n  subscription SUB_POSTS_UPDATES(\n    $_lt: Int = 1000\n    $_gt: Int = 1\n    $updated_timestamp: Int = 1721740000\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n      where: {_and: {locked_funds: {_gt: $_gt, _lt: $_lt}, wallIndex: {_eq: $wallIndex}}}\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      postIndex\n    }\n  }\n": types.Sub_Posts_UpdatesDocument,
    "\n  subscription SUB_POSTS_UPDATES_BYUSER(\n    $_lt: Int = 1000\n    $_gt: Int = 1\n    $updated_timestamp: Int = 1721740000\n    $address: String = \"0\"\n  ) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n      where: {_and: {locked_funds: {_gt: $_gt, _lt: $_lt}, address: {_eq: $address}}}\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      postIndex\n    }\n  }\n": types.Sub_Posts_Updates_ByuserDocument,
    "\n  subscription SUB_POSTS_UPDATES_AND_NEW($updated_timestamp: Int = 1721740000) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      timestamp\n      address\n      message\n      postIndex\n      wallIndex\n    }\n  }\n": types.Sub_Posts_Updates_And_NewDocument,
    "\nquery GET_POSTS_USER_BYTIME($offset: Int, $address: String = \"0\", $limit: Int = 25) {\n  graffiti(limit: $limit, offset: $offset, order_by: {timestamp: desc_nulls_last}, where: {address: {_eq: $address}}) {\n    id\n    address\n    message\n    timestamp\n    locked_funds\n    created_at\n    updated_at\n    updated_timestamp\n    postIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n": types.Get_Posts_User_BytimeDocument,
    "\nquery GET_POSTS_USER_LOCKEDFUNDS($offset: Int, $address: String = \"0\", $limit: Int = 25) {\n  graffiti(limit: $limit, offset: $offset, order_by: {locked_funds: desc_nulls_last}, where: {address: {_eq: $address}}) {\n    id\n    address\n    message\n    timestamp\n    locked_funds\n    created_at\n    updated_at\n    updated_timestamp\n    postIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n": types.Get_Posts_User_LockedfundsDocument,
    "\n  query GET_USER_INFO($address: String) {\n  graffiti_aggregate(where: {address: {_eq: $address}}) {\n    aggregate {\n      sum {\n        locked_funds\n      }\n      count\n      min {\n        timestamp\n      }\n    }\n  }\n}  \n  ": types.Get_User_InfoDocument,
    "\n    query GET_LEADERBOARD($address: String) {\n    graffiti_leaderboard {\n      sum_locked_funds\n      address\n      graffiti_count\n    }\n  }  \n  ": types.Get_LeaderboardDocument,
    "\n  query GET_COMMUNITIES_BY_LOCKED_FUNDS {\n  wallsByFunds {\n    sum_locked_funds\n    wallIndex\n    postCost\n    wallName\n    created_at\n  }\n}\n": types.Get_Communities_By_Locked_FundsDocument,
    "\n  query GET_SPECIFIC_COMMUNITY($wallName: String = \"Default Wall\") {\n    walls(where: {wallName: {_eq: $wallName}}) {\n      created_at\n      postCost\n      wallIndex\n      wallName\n  }\n}\n": types.Get_Specific_CommunityDocument,
    "\nquery GET_SPECIFIC_POST($id: Int = 10) {\n  graffiti(where: {postIndex: {_eq: $id}}) {\n    address\n    created_at\n    id\n    locked_funds\n    message\n    postIndex\n    timestamp\n    updated_at\n    updated_timestamp\n    wallIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n": types.Get_Specific_PostDocument,
    "\nquery GET_FEATURED_POSTS {\n  graffiti_featured_with_walls(limit: 3) {\n    address\n    created_at\n    id\n    locked_funds\n    message\n    randomized_score\n    timestamp\n    unindice\n    updated_at\n    updated_timestamp\n    wallIndex\n    wallName\n  }\n}\n  ": types.Get_Featured_PostsDocument,
    "\n  query GET_FEATURED_HASHTAGS @cached(ttl: 120) {\n    hashtag_trends(limit: 10) {\n      hashtag\n      hashtag_locked_funds\n  }\n}\n": types.Get_Featured_HashtagsDocument,
    "query GET_QUERY_SEARCH($query: String = \"\", $offset: Int = 0) {\n  search_posts(args: {search: $query}, limit: 10, offset: $offset) {\n    address\n    created_at\n    graffitiToWalls {\n      wallName\n      wallIndex\n    }\n    id\n    locked_funds\n    message\n    postIndex\n    timestamp\n    updated_at\n    updated_timestamp\n    wallIndex\n  }\n}": types.Get_Query_SearchDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_POSTS_TIMESTAMP_AGGREGATE_HELPER(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { locked_funds: desc_nulls_last }\n      where: {\n        _and: [\n          { wallIndex: { _eq: $wallIndex } },\n          { timestamp: { _gt: $from } }, \n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        address\n        message\n        timestamp\n        locked_funds\n        postIndex\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GET_POSTS_TIMESTAMP_AGGREGATE_HELPER(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { locked_funds: desc_nulls_last }\n      where: {\n        _and: [\n          { wallIndex: { _eq: $wallIndex } },\n          { timestamp: { _gt: $from } }, \n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        address\n        message\n        timestamp\n        locked_funds\n        postIndex\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_POSTS_BUYSER_FUNDS_AGGREGATE(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $address: String = \"0\"\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { locked_funds: desc_nulls_last }\n      where: {\n        _and: [\n          { address: { _eq: $address } },\n          { timestamp: { _gt: $from } }, \n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        address\n        message\n        timestamp\n        locked_funds\n        postIndex\n        graffitiToWalls {\n          wallName\n        }\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GET_POSTS_BUYSER_FUNDS_AGGREGATE(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $address: String = \"0\"\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { locked_funds: desc_nulls_last }\n      where: {\n        _and: [\n          { address: { _eq: $address } },\n          { timestamp: { _gt: $from } }, \n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        address\n        message\n        timestamp\n        locked_funds\n        postIndex\n        graffitiToWalls {\n          wallName\n        }\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_POSTS_TIMESTAMP_AGGREGATE_BYTIME_TEST(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { timestamp: desc_nulls_last }\n      where: {\n        _and: [\n          { wallIndex: { _eq: $wallIndex } },\n          { timestamp: { _gt: $from } },\n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n      updated_timestamp\n      updated_at\n      locked_funds\n      timestamp\n      address\n      message\n      postIndex\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GET_POSTS_TIMESTAMP_AGGREGATE_BYTIME_TEST(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { timestamp: desc_nulls_last }\n      where: {\n        _and: [\n          { wallIndex: { _eq: $wallIndex } },\n          { timestamp: { _gt: $from } },\n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n      updated_timestamp\n      updated_at\n      locked_funds\n      timestamp\n      address\n      message\n      postIndex\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_POSTS_BYUSER_TIMESTAMP_AGGREGATE(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $address: String = \"0\"\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { timestamp: desc_nulls_last }\n      where: {\n        _and: [\n          { address: { _eq: $address } },\n          { timestamp: { _gt: $from } },\n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        updated_timestamp\n        updated_at\n        locked_funds\n        timestamp\n        address\n        message\n        postIndex\n        graffitiToWalls {\n          wallName\n        }\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GET_POSTS_BYUSER_TIMESTAMP_AGGREGATE(\n    $limit: Int\n    $from: Int\n    $until: Int\n    $offset: Int\n    $basura: String\n    $address: String = \"0\"\n  ) {\n    graffiti_aggregate(\n      limit: $limit\n      offset: $offset\n      order_by: { timestamp: desc_nulls_last }\n      where: {\n        _and: [\n          { address: { _eq: $address } },\n          { timestamp: { _gt: $from } },\n          { timestamp: { _lt: $until } }\n        ]\n      }\n    ) {\n      nodes {\n        id\n        updated_timestamp\n        updated_at\n        locked_funds\n        timestamp\n        address\n        message\n        postIndex\n        graffitiToWalls {\n          wallName\n        }\n      }\n      aggregate {\n        min {\n          locked_funds\n        }\n        max {\n          locked_funds\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription SUB_POSTS_UPDATES(\n    $_lt: Int = 1000\n    $_gt: Int = 1\n    $updated_timestamp: Int = 1721740000\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n      where: {_and: {locked_funds: {_gt: $_gt, _lt: $_lt}, wallIndex: {_eq: $wallIndex}}}\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      postIndex\n    }\n  }\n"): (typeof documents)["\n  subscription SUB_POSTS_UPDATES(\n    $_lt: Int = 1000\n    $_gt: Int = 1\n    $updated_timestamp: Int = 1721740000\n    $wallIndex: bigint = 1\n  ) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n      where: {_and: {locked_funds: {_gt: $_gt, _lt: $_lt}, wallIndex: {_eq: $wallIndex}}}\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      postIndex\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription SUB_POSTS_UPDATES_BYUSER(\n    $_lt: Int = 1000\n    $_gt: Int = 1\n    $updated_timestamp: Int = 1721740000\n    $address: String = \"0\"\n  ) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n      where: {_and: {locked_funds: {_gt: $_gt, _lt: $_lt}, address: {_eq: $address}}}\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      postIndex\n    }\n  }\n"): (typeof documents)["\n  subscription SUB_POSTS_UPDATES_BYUSER(\n    $_lt: Int = 1000\n    $_gt: Int = 1\n    $updated_timestamp: Int = 1721740000\n    $address: String = \"0\"\n  ) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n      where: {_and: {locked_funds: {_gt: $_gt, _lt: $_lt}, address: {_eq: $address}}}\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      postIndex\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  subscription SUB_POSTS_UPDATES_AND_NEW($updated_timestamp: Int = 1721740000) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      timestamp\n      address\n      message\n      postIndex\n      wallIndex\n    }\n  }\n"): (typeof documents)["\n  subscription SUB_POSTS_UPDATES_AND_NEW($updated_timestamp: Int = 1721740000) {\n    graffiti_stream(\n      batch_size: 1\n      cursor: {\n        initial_value: { updated_timestamp: $updated_timestamp }\n        ordering: ASC\n      }\n    ) {\n      id\n      updated_timestamp\n      updated_at\n      locked_funds\n      timestamp\n      address\n      message\n      postIndex\n      wallIndex\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_POSTS_USER_BYTIME($offset: Int, $address: String = \"0\", $limit: Int = 25) {\n  graffiti(limit: $limit, offset: $offset, order_by: {timestamp: desc_nulls_last}, where: {address: {_eq: $address}}) {\n    id\n    address\n    message\n    timestamp\n    locked_funds\n    created_at\n    updated_at\n    updated_timestamp\n    postIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n"): (typeof documents)["\nquery GET_POSTS_USER_BYTIME($offset: Int, $address: String = \"0\", $limit: Int = 25) {\n  graffiti(limit: $limit, offset: $offset, order_by: {timestamp: desc_nulls_last}, where: {address: {_eq: $address}}) {\n    id\n    address\n    message\n    timestamp\n    locked_funds\n    created_at\n    updated_at\n    updated_timestamp\n    postIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_POSTS_USER_LOCKEDFUNDS($offset: Int, $address: String = \"0\", $limit: Int = 25) {\n  graffiti(limit: $limit, offset: $offset, order_by: {locked_funds: desc_nulls_last}, where: {address: {_eq: $address}}) {\n    id\n    address\n    message\n    timestamp\n    locked_funds\n    created_at\n    updated_at\n    updated_timestamp\n    postIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n"): (typeof documents)["\nquery GET_POSTS_USER_LOCKEDFUNDS($offset: Int, $address: String = \"0\", $limit: Int = 25) {\n  graffiti(limit: $limit, offset: $offset, order_by: {locked_funds: desc_nulls_last}, where: {address: {_eq: $address}}) {\n    id\n    address\n    message\n    timestamp\n    locked_funds\n    created_at\n    updated_at\n    updated_timestamp\n    postIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_USER_INFO($address: String) {\n  graffiti_aggregate(where: {address: {_eq: $address}}) {\n    aggregate {\n      sum {\n        locked_funds\n      }\n      count\n      min {\n        timestamp\n      }\n    }\n  }\n}  \n  "): (typeof documents)["\n  query GET_USER_INFO($address: String) {\n  graffiti_aggregate(where: {address: {_eq: $address}}) {\n    aggregate {\n      sum {\n        locked_funds\n      }\n      count\n      min {\n        timestamp\n      }\n    }\n  }\n}  \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GET_LEADERBOARD($address: String) {\n    graffiti_leaderboard {\n      sum_locked_funds\n      address\n      graffiti_count\n    }\n  }  \n  "): (typeof documents)["\n    query GET_LEADERBOARD($address: String) {\n    graffiti_leaderboard {\n      sum_locked_funds\n      address\n      graffiti_count\n    }\n  }  \n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_COMMUNITIES_BY_LOCKED_FUNDS {\n  wallsByFunds {\n    sum_locked_funds\n    wallIndex\n    postCost\n    wallName\n    created_at\n  }\n}\n"): (typeof documents)["\n  query GET_COMMUNITIES_BY_LOCKED_FUNDS {\n  wallsByFunds {\n    sum_locked_funds\n    wallIndex\n    postCost\n    wallName\n    created_at\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_SPECIFIC_COMMUNITY($wallName: String = \"Default Wall\") {\n    walls(where: {wallName: {_eq: $wallName}}) {\n      created_at\n      postCost\n      wallIndex\n      wallName\n  }\n}\n"): (typeof documents)["\n  query GET_SPECIFIC_COMMUNITY($wallName: String = \"Default Wall\") {\n    walls(where: {wallName: {_eq: $wallName}}) {\n      created_at\n      postCost\n      wallIndex\n      wallName\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_SPECIFIC_POST($id: Int = 10) {\n  graffiti(where: {postIndex: {_eq: $id}}) {\n    address\n    created_at\n    id\n    locked_funds\n    message\n    postIndex\n    timestamp\n    updated_at\n    updated_timestamp\n    wallIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n"): (typeof documents)["\nquery GET_SPECIFIC_POST($id: Int = 10) {\n  graffiti(where: {postIndex: {_eq: $id}}) {\n    address\n    created_at\n    id\n    locked_funds\n    message\n    postIndex\n    timestamp\n    updated_at\n    updated_timestamp\n    wallIndex\n    graffitiToWalls {\n      wallName\n    }\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery GET_FEATURED_POSTS {\n  graffiti_featured_with_walls(limit: 3) {\n    address\n    created_at\n    id\n    locked_funds\n    message\n    randomized_score\n    timestamp\n    unindice\n    updated_at\n    updated_timestamp\n    wallIndex\n    wallName\n  }\n}\n  "): (typeof documents)["\nquery GET_FEATURED_POSTS {\n  graffiti_featured_with_walls(limit: 3) {\n    address\n    created_at\n    id\n    locked_funds\n    message\n    randomized_score\n    timestamp\n    unindice\n    updated_at\n    updated_timestamp\n    wallIndex\n    wallName\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GET_FEATURED_HASHTAGS @cached(ttl: 120) {\n    hashtag_trends(limit: 10) {\n      hashtag\n      hashtag_locked_funds\n  }\n}\n"): (typeof documents)["\n  query GET_FEATURED_HASHTAGS @cached(ttl: 120) {\n    hashtag_trends(limit: 10) {\n      hashtag\n      hashtag_locked_funds\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GET_QUERY_SEARCH($query: String = \"\", $offset: Int = 0) {\n  search_posts(args: {search: $query}, limit: 10, offset: $offset) {\n    address\n    created_at\n    graffitiToWalls {\n      wallName\n      wallIndex\n    }\n    id\n    locked_funds\n    message\n    postIndex\n    timestamp\n    updated_at\n    updated_timestamp\n    wallIndex\n  }\n}"): (typeof documents)["query GET_QUERY_SEARCH($query: String = \"\", $offset: Int = 0) {\n  search_posts(args: {search: $query}, limit: 10, offset: $offset) {\n    address\n    created_at\n    graffitiToWalls {\n      wallName\n      wallIndex\n    }\n    id\n    locked_funds\n    message\n    postIndex\n    timestamp\n    updated_at\n    updated_timestamp\n    wallIndex\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;